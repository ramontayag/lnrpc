# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: walletunlocker.proto for package 'lnrpc'

require 'grpc'
require 'walletunlocker_pb'

module Lnrpc
  module WalletUnlocker
    #
    # Comments in this file will be directly parsed into the API
    # Documentation as descriptions of the associated method, message, or field.
    # These descriptions should go right above the definition of the object, and
    # can be in either block or // comment format.
    #
    # An RPC method can be matched to an lncli command by placing a line in the
    # beginning of the description in exactly the following format:
    # lncli: `methodname`
    #
    # Failure to specify the exact name of the command will cause documentation
    # generation to fail.
    #
    # More information on how exactly the gRPC documentation is generated from
    # this proto file can be found here:
    # https://github.com/lightninglabs/lightning-api
    #
    # WalletUnlocker is a service that is used to set up a wallet password for
    # lnd at first startup, and unlock a previously set up wallet.
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'lnrpc.WalletUnlocker'

      #
      # GenSeed is the first method that should be used to instantiate a new lnd
      # instance. This method allows a caller to generate a new aezeed cipher seed
      # given an optional passphrase. If provided, the passphrase will be necessary
      # to decrypt the cipherseed to expose the internal wallet seed.
      #
      # Once the cipherseed is obtained and verified by the user, the InitWallet
      # method should be used to commit the newly generated seed, and create the
      # wallet.
      rpc :GenSeed, ::Lnrpc::GenSeedRequest, ::Lnrpc::GenSeedResponse
      #
      # InitWallet is used when lnd is starting up for the first time to fully
      # initialize the daemon and its internal wallet. At the very least a wallet
      # password must be provided. This will be used to encrypt sensitive material
      # on disk.
      #
      # In the case of a recovery scenario, the user can also specify their aezeed
      # mnemonic and passphrase. If set, then the daemon will use this prior state
      # to initialize its internal wallet.
      #
      # Alternatively, this can be used along with the GenSeed RPC to obtain a
      # seed, then present it to the user. Once it has been verified by the user,
      # the seed can be fed into this RPC in order to commit the new wallet.
      rpc :InitWallet, ::Lnrpc::InitWalletRequest, ::Lnrpc::InitWalletResponse
      # lncli: `unlock`
      # UnlockWallet is used at startup of lnd to provide a password to unlock
      # the wallet database.
      rpc :UnlockWallet, ::Lnrpc::UnlockWalletRequest, ::Lnrpc::UnlockWalletResponse
      # lncli: `changepassword`
      # ChangePassword changes the password of the encrypted wallet. This will
      # automatically unlock the wallet database if successful.
      rpc :ChangePassword, ::Lnrpc::ChangePasswordRequest, ::Lnrpc::ChangePasswordResponse
    end

    Stub = Service.rpc_stub_class
  end
end
